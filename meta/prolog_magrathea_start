#!/bin/bash

# exit when unitialized variable is detected
#set -u

###########################################################
# set mode to switch between                              #
###########################################################
# 1 - straight exit 0                                     #
# 2 - sleep 10, then exit 0                               #
# 3 - fake magrathea (xm and update cache)                #
# 4 - magrathea without boot                              #
# 5 - magrathea with boot                                 #
###########################################################
mode=5

###########################################################
# configure variables                                     #
###########################################################

if [ "$PBS_SERVER" == "" ]; then
	PBS_SERVER=`cat /var/spool/torque/server_name`;
fi

#########################
## prologue parameters ##
#########################
PROG=$0
JOBID=$1
USER=$2
GROUP=$3
JOBNAME=$4
DOMAIN=$5

#########################
## derived values      ##
#########################
ALTERNATIVE=$MAGRATHEA_VIRTUAL_ALTERNATIVE
VLANID=$MAGRATHEA_VLANID
CLOUDTYPE=$MAGRATHEA_TYPE
NCPU=1 # TODO change after resources are reregistered on nodes

export PBS_ALTERNATIVE=$ALTERNATIVE
export PBS_VLANID=$MAGRATHEA_VLANID

#########################
## commands and path   ##
#########################
ADMIN_COMMAND=/usr/sbin/magrathea-admin
CACHE_LIST=/software/pbs-7.0.0/cache/list_cache
CACHE_UPDATE=/software/pbs-7.0.0/cache/update_cache

#########################
## load system presets ##
#########################
. /etc/profile

###########################################################
# error codes                                             #
###########################################################

STATUS_EMPTY=1
STATUS_BAD=2

FAKE_CANT_BOOT=11
FAKE_CANT_STATUS=12
FAKE_CANT_STOP=13
FAKE_CANT_FORCESTOP=113

MAGRATHEA_DOMAIN_DOESNT_EXIST_CANT_CREATE=21
MAGRATHEA_BAD_STATUS_FOR_BOOT=22
MAGRATHEA_CANT_BOOT=23
MAGRATHEA_BOOT_TIMEOUT=24
MAGRATHEA_CANT_SET_DOWN_FATAL=125
MAGRATHEA_CANT_START_CLUSTER=26
MAGRATHEA_BOOT_TIMEOUT=27

CACHE_CANT_UPDATE=51
CACHE_CANT_UPDATE_FATAL=151

BOOT_FAILURE=91
BOOT_CLEANUP_FAILURE=92

###########################################################
# setup logging                                           #
###########################################################

date >>/tmp/mujtrace
echo $0 >>/tmp/mujtrace
echo "$*" >>/tmp/mujtrace
env >>/tmp/mujtrace
echo "--------------------------">>/tmp/mujtrace

exec 1>>/tmp/log 2>&1
set -x

###########################################################
# main code                                               #
###########################################################

[[ $mode -eq 2 ]] && sleep 10;
[[ $mode -le 2 ]] && exit 0;

#########################
## status checks       ##
#########################

STATUS=

# status without magrathea
fake_status()
{
	[[ -z "`/usr/sbin/xm list ${DOMAIN/\.*/} | grep -e '-b----'`" ]] && exit $FAKE_CANT_STATUS; # check the xen status
	STATUS=`$CACHE_LIST $PBS_SERVER magrathea | awk -F"[ \t;]+" '/^'$DOMAIN'/ { print $3 }'`;        # get status string from cache
}

# status with magrathea
magrathea_status()
{
	STATUS=`$ADMIN_COMMAND status | awk -F"[ \t;]+" '/^'$DOMAIN'/ { print $2 }'`;
}

#########################
## start               ##
#########################

# invoke booot
invoke_booot()
{
	/afs/ics.muni.cz/software/booot/booot create ${DOMAIN/\.*/} >/tmp/booot.log 2>&1
	[[ $? -ne 0 ]] && clean_exit $BOOT_FAILURE;
	. /tmp/booot.params
}

# start domU without magrathea
fake_start()
{
	/usr/sbin/xm create ${DOMAIN/\.*/} 2>/dev/null
	[[ $? -ne 0 ]] && exit $FAKE_CANT_BOOT;

	NOW=`date +%s`
	$CACHE_UPDATE $PBS_SERVER $DOMAIN magrathea "running-cluster;0;changed=$NOW"
	[[ $? -eq 0 ]] && exit 0;

	/usr/sbin/xm destroy ${DOMAIN/\.*/} 2>/dev/null
	[[ $? -ne 0 ]] && exit $FAKE_CANT_FORCESTOP;
	
	exit $CACHE_CANT_UPDATE;
}

clean_exit()
{
	cleanup_boot;
	exit $1;
}

# start domU using magrathea
magrathea_start()
{
	# check if domain exists, if not create
	magrathea_status;
	[[ -z $STATUS ]] && $ADMIN_COMMAND create $DOMAIN ${DOMAIN/\.*/} normal `host $DOMAIN | awk '// { print $4 }'` $MAGRATHEA_DOMAIN_FOREIGN;
	
	# check if creation went ok
	magrathea_status;
	[[ -z $STATUS ]] && clean_exit $MAGRATHEA_DOMAIN_DOESNT_EXIST_CANT_CREATE;
	
	if [ $STATUS != "down-bootable" ]; then # inconsistent state detected - scheduler/magrathea mismatch
		NOW=`date +%s`
		$CACHE_UPDATE $PBS_SERVER $DOMAIN magrathea "inconsistent;0;changed=$NOW" # overwrite magrathea state
		[[ $? -ne 0 ]] && clean_exit $CACHE_CANT_UPDATE_FATAL;
		clean_exit $MAGRATHEA_BAD_STATUS_FOR_BOOT;
	fi
	
	# try to boot machine
	$ADMIN_COMMAND force-boot $DOMAIN;
	[[ $? -ne 0 ]] && clean_exit $MAGRATHEA_CANT_BOOT;

	# check state each 10 seconds for 2 minutes total until in free state
	for i in `seq 1 12`; do
		magrathea_status;
		[[ "$STATUS" = "free" ]] && break;
		sleep 10;
	done

	magrathea_status;
	if [ "$STATUS" != "free" ]; then # still not online, try to cleanup
		/usr/sbin/xm destroy ${DOMAIN/\.*/} 2>/dev/null
		[[ $? -ne 0 ]] && clean_exit $FAKE_CANT_FORCESTOP;
		$ADMIN_COMMAND down $DOMAIN;
		[[ $? -ne 0 ]] && clean_exit $MAGRATHEA_CANT_SET_DOWN_FATAL;

		clean_exit $MAGRATHEA_BOOT_TIMEOUT;
	fi

	$ADMIN_COMMAND startcluster $DOMAIN $JOBNAME $NCPU;
	if [ $? -ne 0 ]; then # try to cleanup
		/usr/sbin/xm destroy ${DOMAIN/\.*/} 2>/dev/null
		[[ $? -ne 0 ]] && clean_exit $FAKE_CANT_FORCESTOP;
		$ADMIN_COMMAND down $DOMAIN;
		[[ $? -ne 0 ]] && clean_exit $MAGRATHEA_CANT_SET_DOWN_FATAL;

		clean_exit $MAGRATHEA_CANT_START_CLUSTER;
	fi
}

#########################
## stop                ##
#########################

fake_stop()
{
	NOW=`date +%s`
	$CACHE_UPDATE $PBS_SERVER $DOMAIN magrathea "down-bootable;changed=$NOW"
	if [ $? -ne 0 ]; then # can't update cache, try to cleanup
		/usr/sbin/xm destroy ${DOMAIN/\.*/};
		# ignore return of xm
		exit $CACHE_CANT_UPDATE_FATAL;
	fi
	
	/usr/sbin/xm shutdown -w ${DOMAIN/\.*/};
	if [ $? -ne 0 ]; then # can't shutdown, try to cleanup
		/usr/sbin/xm destroy ${DOMAIN/\.*/};
		#ignore return of xm
		exit $FAKE_CANT_STOP;
	fi
}

magrathea_stop()
{
	magrathea_status;
	if [ "$STATUS" = "running-cluster" ]; then # if not running cluster, don't try to shutdown

		$ADMIN_COMMAND stopcluster $DOMAIN $JOBNAME $NCPU;
		if [ $? -ne 0 ]; then
			# we could cleanup cache here, but can't right now, since we can't do cache delete
			:
		fi

		$ADMIN_COMMAND force-down $DOMAIN;
		if [ $? -ne 0 ]; then
			/usr/sbin/xm destroy ${DOMAIN/\.*/} 2>/dev/null
			[[ $? -ne 0 ]] && clean_exit $FAKE_CANT_FORCESTOP;
			$ADMIN_COMMAND down $DOMAIN;
			[[ $? -ne 0 ]] && clean_exit $MAGRATHEA_CANT_SET_DOWN_FATAL;
		fi
	fi

	for i in `seq 1 12`; do
		magrathea_status;
		[[ "$STATUS" = "down-bootable" ]] && break;
		sleep 10;
	done

	magrathea_status;
	if [ "$STATUS" != "down-bootable" ]; then
		/usr/sbin/xm destroy ${DOMAIN/\.*/} 2>/dev/null
		[[ $? -ne 0 ]] && clean_exit $FAKE_CANT_FORCESTOP;
		$ADMIN_COMMAND down $DOMAIN;
		[[ $? -ne 0 ]] && clean_exit $MAGRATHEA_CANT_SET_DOWN_FATAL;

		clean_exit $MAGRATHEA_BOOT_TIMEOUT;
	fi
}

cleanup_boot()
{
	if [ $mode -eq 5 ]; then
		/afs/ics.muni.cz/software/booot/booot delete ${DOMAIN/\.*/} >/tmp/booot.log 2>&1
		[[ $? -ne 0 ]] && exit $BOOT_CLEANUP_FAILURE;
	fi
}

if [ -z $5 ]; then
  exit 3
fi

case $PROG in
 *status)
    STATUS=""
    [[ $mode -le 3 ]] && fake_status;
    [[ $mode -ge 4 ]] && magrathea_status;

    [[ -z $STATUS ]] && exit $STATUS_EMPTY;			# empty status, shouldn't happen

    [[ "$STATUS" = "running-cluster" ]] && exit 0;
	exit $STATUS_BAD;
    ;;
 *start)
 	[[ $mode -eq 5 ]] && invoke_booot;
 	[[ $mode -le 3 ]] && fake_start;
 	[[ $mode -ge 4 ]] && magrathea_start;

    exit 0;
    ;;
 *stop)
 	[[ $mode -le 3 ]] && fake_stop;
	[[ $mode -ge 4 ]] && magrathea_stop;

    clean_exit 0;
    ;;
esac;

exit 2
