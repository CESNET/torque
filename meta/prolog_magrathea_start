#!/bin/bash

# exit when unitialized variable is detected
#set -u

exec 1>>/tmp/log 2>&1
set -x

###########################################################
# run mode 1 - with boot 0 - without boot                 #
###########################################################
INVOKE_BOOT=1

###########################################################
# configure variables                                     #
###########################################################

if [ "$PBS_SERVER" == "" ]; then
	PBS_SERVER=`cat /var/spool/torque/server_name`;
fi

#########################
## prologue parameters ##
#########################
PROG=$0
JOBID=$1
USER=$2
GROUP=$3
JOBNAME=$4
DOMAIN=$5

#########################
## derived values      ##
#########################
ALTERNATIVE=$MAGRATHEA_VIRTUAL_ALTERNATIVE
VLANID=$MAGRATHEA_VLANID
CLOUDTYPE=$MAGRATHEA_TYPE
NCPU=1 # TODO change after resources are reregistered on nodes

export PBS_ALTERNATIVE=$ALTERNATIVE
export PBS_VLANID=$MAGRATHEA_VLANID
export PBS_JOBID=$JOBID
export PBS_SCRIPT_FILE=/var/spool/torque/mom_priv/jobs/${JOBID}.SC

#########################
## commands and path   ##
#########################
ADMIN_COMMAND=/usr/sbin/magrathea-admin
CACHE_LIST=/usr/sbin/list_cache
CACHE_UPDATE=/usr/sbin/update_cache

#########################
## load system presets ##
#########################
. /etc/profile

###########################################################
# setup logging                                           #
###########################################################

date >>/tmp/mujtrace
echo $0 >>/tmp/mujtrace
echo "$*" >>/tmp/mujtrace
env >>/tmp/mujtrace
echo "--------------------------">>/tmp/mujtrace

###########################################################
# main code                                               #
###########################################################

NOW=`date +%s`

#########################
## Rollback util       ##
#########################

safe_rollback=( )

add_rollback()
{
	safe_rollback[${#safe_rollback[*]}]=$1;
}

run_rollback()
{
	while [ ${#safe_rollback[@]} -ge 1 ]; do
		${safe_rollback[${#safe_rollback[@]}-1]} rollback;
		unset safe_rollback[${#safe_rollback[@]}-1];
	done
}

exit_with_rollback()
{
	run_rollback
	exit $1;
}

#########################
## status checks       ##
#########################

MAGRATHEA_STATUS=
XM_STATUS=
CACHE_STATUS=

fetch_xm_status()
{
	# fetch basic status
	base_xm_status=`/usr/sbin/xm list ${DOMAIN/\.*/} 2>/dev/null | grep ${DOMAIN/\.*/}`;

	# check if the virtual machine is present, if not, the machine is offline
	if [ -z "$base_xm_status" ]; then
		XM_STATUS=offline;
		return;
	fi

	# if the machine is not block or running, it has to be shutting down, paused, or failed
	if [ -z "`echo $base_xm_status | grep -- -b----`" ] && [ -z "`echo $base_xm_status | grep -- r-----`" ]; then
		# States covered - paused, shutdown, crashed, dying
		XM_STATUS=processing;
	else
		XM_STATUS=online;
	fi
}

fetch_cache_status()
{
	CACHE_STATUS=`$CACHE_LIST $PBS_SERVER magrathea | awk -F"[ \t;]+" '/^'$DOMAIN'/ { print $3 }'`;        # get status string from cache
}

fetch_magrathea_status()
{
	MAGRATHEA_STATUS=`$ADMIN_COMMAND status | awk -F"[ \t;]+" '/^'$DOMAIN'/ { print $2 }'`;
}

test_status_start()
{
	fetch_xm_status;
	if [ "$XM_STATUS" != "offline" ]; then
		logger -p daemon.crit -t magrathea_prologue "Race condition. Cluster request received while XEN machine is not offline.";
		exit_with_rollback 1;
	fi

	fetch_cache_status;
	if [ -z "$CACHE_STATUS" ]; then
		logger -p daemon.crit -t magrathea_prologue "Fatal state. Cluster request received but machine state not found in cache.";
		exit_with_rollback 1;
	fi

	if [ "$CACHE_STATUS" != "down-bootable" ]; then
		logger -p daemon.crit -t magrathea_prologue "Race condition. Cluster request received but machine state in cache is not down-bootable.";
		# try to update cache
		$CACHE_UPDATE $PBS_SERVER $DOMAIN magrathea "inconsistent;0;changed=$NOW" # overwrite magrathea state
		exit_with_rollback 1;
	fi

	fetch_magrathea_status;
	if [ "$MAGRATHEA_STATUS" != "down-bootable" ] && [ ! -z "$MAGRATHEA_STATUS" ]; then
		logger -p daemon.crit -t magrathea_prologue "Race condition. Cluster request received but magrathea state isn't bootable.";
		return_with_rollback 1;
	fi
}

test_status_running()
{
	fetch_xm_status;
	if [ "$XM_STATUS" != "online" ]; then
		logger -p daemon.info -t magrathea_prologue "XEN machine is down, or shutting down. Tearing down cluster.";
		exit_with_rollback 1;
	fi

	fetch_cache_status;
	if [ -z "$CACHE_STATUS" ]; then
		logger -p daemon.warning -t magrathea_prologue "Weird state. Cluster running, but magrathea cache record is missing.";
		# silent
	fi

	if [ "$CACHE_STATUS" != "running-cluster" ]; then
		logger -p daemon.warning -t magrathea_prologue "Weird state. Cluster running, but magrathea cache record doesn't match.";
		# silent
	fi

	fetch_magrathea_status;
	if [ -z "$MAGRATHEA_STATUS" ]; then
		logger -p daemon.info -t magrathea_prologue "Magrathea no longer holding machine. Tearing down cluster.";
		exit_with_rollback 1;
	fi

	if [ "$MAGRATHEA_STATUS" != "running-cluster" ]; then
		logger -p daemon.info -t magrathea_prologue "Magrathea reports non-running state. Tearing down cluster.";
		exit_with_rollback 1;
	fi
}

#########################
## cleanup functions   ##
#########################

cleanup_boot()
{
	if [ $INVOKE_BOOT -eq 1 ]; then
		date >>/tmp/booot.log
		/afs/ics.muni.cz/software/booot/booot delete --force-delete-lv ${DOMAIN/\.*/} >>/tmp/booot.log 2>&1
		if [ $? -ne 0 ]; then
			logger -p daemon.crit -t magrathea_prologue "Couldn't cleanup booot.";
			cat /tmp/booot.log | mail -s "Error during deleting virtual domain" $USER
			return 1;
		fi
	fi
}

cleanup_magrathea_cluster()
{
	fetch_magrathea_status;
	if [ "$MAGRATHEA_STATUS" = "running-cluster" ]; then
		$ADMIN_COMMAND stopcluster $DOMAIN $JOBNAME $NCPU;
		if [ $? -ne 0 ]; then
			logger -p daemon.crit -t magrathea_prologue "Couldn't stop cluster.";
		fi
	fi
}

cleanup_magrathea_booting()
{
	# this is very dirty

	# try the nice way
	$ADMIN_COMMAND force-down $DOMAIN;
	for i in `seq 1 60`; do
		[[ "`xm list | grep ${DOMAIN/\.*/}`" = "" ]] && break;
		sleep 5;
	done

	# that's enough waiting, force it down
	/usr/sbin/xm destroy ${DOMAIN/\.*/} 2>/dev/null;
	for i in `seq 1 60`; do
		[[ "`xm list | grep ${DOMAIN/\.*/}`" = "" ]] && break;
		sleep 5;
	done

	# propagate new state
	$ADMIN_COMMAND down $DOMAIN;

	# reset foreign flag
	$ADMIN_COMMAND set-foreign $DOMAIN 0
}

#########################
## start               ##
#########################

# invoke booot
invoke_booot()
{
	if [ $INVOKE_BOOT -ne 1 ]; then return; fi

	cleanup_boot;

	date >>/tmp/booot.log
	/afs/ics.muni.cz/software/booot/booot create ${DOMAIN/\.*/} >>/tmp/booot.log 2>&1
	if [ $? -ne 0 ]; then
		logger -p daemon.crit -t magrathea_prologue "Fatal error. Booot failed.";
		cat /tmp/booot.log | mail -s "Error during creating virtual domain" $USER
		cleanup_boot
		exit 1;
	fi
	. /tmp/booot.params
	add_rollback cleanup_boot;
}

# start domU using magrathea
magrathea_start()
{
	if [ -z "$MAGRATHEA_STATUS" ]; then
		$ADMIN_COMMAND create $DOMAIN ${DOMAIN/\.*/} normal `host $DOMAIN | awk '// { print $4 }'` $MAGRATHEA_DOMAIN_FOREIGN;
		test_status_start;
		if [ -z "$MAGRATHEA_STATUS" ]; then
			logger -p daemon.crit -t magrathea_prologue "Couldn't create domain using magrathea.";
			exit_with_rollback 1;
		fi
	else
		foreign_num=`echo $MAGRATHEA_DOMAIN_FOREIGN | cut -d\  -f2`;
		if [ -z "$foreign_num" ]; then foreign_num=0; fi
		$ADMIN_COMMAND set-foreign $DOMAIN $foreign_num; 
	fi

	# try to boot machine
	$ADMIN_COMMAND force-boot $DOMAIN;
	if [ $? -ne 0 ]; then
		logger -p daemon.crit -t magrathea_prologue "Couldn't boot machine using magrathea.";
		exit_with_rollback 1;
	fi
	add_rollback cleanup_magrathea_booting

	# check state each 10 seconds for 2 minutes total until in free state
	for i in `seq 1 12`; do
		fetch_magrathea_status;
		[[ "$MAGRATHEA_STATUS" = "free" ]] && break;
		sleep 10;
	done

	fetch_magrathea_status;
	if [ "$MAGRATHEA_STATUS" != "free" ]; then # still not online, try to cleanup
		logger -p daemon.crit -t magrathea_prologue "Machine didn't switch to free state after force-boot.";
		exit_with_rollback 1;
	fi

	$ADMIN_COMMAND startcluster $DOMAIN $JOBNAME $NCPU;
	if [ $? -ne 0 ]; then # try to cleanup
		logger -p daemon.crit -t magrathea_prologue "Couldn't start cluster after machine started.";
		exit_with_rollback 1;
	fi
}

#########################
## stop                ##
#########################

magrathea_stop()
{
	add_rollback cleanup_boot
	add_rollback cleanup_magrathea_booting
	add_rollback cleanup_magrathea_cluster
	run_rollback
}

if [ -z $5 ]; then
  exit 3
fi

case $PROG in
	*status)
		test_status_running;
		exit 0;
	;;
	*start)
		test_status_start;
		invoke_booot;
		magrathea_start;
		exit 0;
	;;
	*stop)
		magrathea_stop;
		exit 0;
	;;
esac;

exit 2
