#!/usr/bin/perl -w

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use CRI::Test::Reader;
use Data::Properties;
use Fcntl ':flock';
use POSIX qw(:termios_h);

my $key = 0;
my $tmp_props = Data::Properties->new();

# Read in the config file if possible
if(-e "/etc/clustertest.conf") 
{
    open(FH, "<","/etc/clustertest.conf") or print STDERR "Couln't read /etc/clustertest.conf: $!\n";
    flock(FH,LOCK_SH) or die('Bad stuff happened with the file lock on clustertest.conf'); 
    $tmp_props->load(\*FH) or print STDERR "Couldn't load Data::Properties $!\n";
    close(FH);
}
else{
    die "/etc/clustertest.conf didn't exist! I don't know where to look for logs.\n\n";
}

# Get a list of the directories
my $dir = $tmp_props->get_property('Outdir');

chdir($tmp_props->get_property('Outdir')) or die("Couldn't change to the results directory: " . $tmp_props->get_property('Outdir'));
my @dirs = <*>;

if(scalar @dirs == 0){
    die("No result directories found\n"); 
}

my $max = @dirs - 1;
my $min = 0;
my $cur = $max;
my @tests = ();

my $keepGoing = 1;

while($keepGoing)
{


    # Find 9 tests centered on the current test
    my $found = 1;
    @tests = ($cur);
    my $localmax = $cur + 1;
    my $localmin = $cur - 1;

    my $currentIndex = 0;

    while($found < 10 && $found < scalar(@dirs))
    {
	if($localmax <= $max){
	    push(@tests,$localmax);
	    $found++;
	    $localmax++;
	}
	if($localmin >= 0){
	    unshift(@tests,$localmin);
	    $localmin--;
	    $found++;
	    $currentIndex++;
	}
    } 

    # Print the 9 tests with the associated key and test summary info
    print "\nPress 0-9 to choose a test. Press ? for help\n";
    print "Showing tests " . $tests[0] . " to " . $tests[scalar(@tests) - 1]." of $max\n";
    print "---------------\n";
    for(my $i = 0;$i<10;$i++){
	my $testResult = CRI::Test::Reader->new;
	$testResult->loadLog("$dir/" . $dirs[$tests[$i]] . "/Summary.log");
	my $line = "$i (" . $dirs[$tests[$i]] . ") : " . $testResult->nodeSummary() . "\n"; 
	print colorLine($line,$i == $currentIndex);
    }


    # See what we should do, and 
    $key = getChar();

    if($key eq ',' || $key eq 'k') { $cur = (($cur > 0) ? --$cur : 0); }
    elsif($key eq '.' || $key eq 'j') {$cur = (($cur < $max) ? ++$cur : $max); }
    elsif($key eq 'q') {$keepGoing = 0;}
    elsif($key =~ m/[0-9]/) {
	print system("analyze-log '$dir/" . $dirs[$tests[$key]] . "/Summary.log'");
    }
    elsif($key eq "\n") {
	print system("analyze-log '$dir/" . $dirs[$cur] . "/Summary.log'");
    }
    elsif($key eq "?") {help();}
}


sub getChar
{
    # Taken from perlfaq8    free under same license as perl itself
    # Modified somewhat to not use another module

    # this should work on any POSIX system.

    my $fd_stdin = fileno(STDIN);
    my $term     = POSIX::Termios->new();
    $term->getattr($fd_stdin);
    my $oterm     = $term->getlflag();
    my $echo     = ECHO | ECHOK | ICANON;
    my $noecho   = $oterm & ~$echo;
    $term->setlflag($noecho);  # ok, so i don't want echo either
    $term->setcc(VTIME, 1);
    $term->setattr($fd_stdin, TCSANOW);
    my $key = '';

    sysread(STDIN,$key,1);
    $term->setlflag($oterm);
    $term->setcc(VTIME, 0);
    $term->setattr($fd_stdin, TCSANOW);
    return $key;
}


sub help {
    print STDOUT<<EOF;

[36;02mlast-log help file[0m

    ,,j     Go to the previous test (< key)
    .,k     Go to the next test (> key)
    q       Quit
    ?       This help
    0-9     Run analyze-log on test # from the list
    ENTER   Run analyze-log on the current test

    The message "Use of uninitialized hash key" can occur
    when the Summary.log file is corrupt or incomplete. This
    can occur when a test is killed and doesn't run to completion.


[36;02mPress any key to exit this help[0m

EOF
$key = getChar();
}

sub colorLine 
{
    my ($line,$iscurrent) = @_; 
    $line =~ s/: [0-9]* /: /;
    if($iscurrent){
	$line =~ s/PASS/[[00;32mPASS[0m][01m/;
	$line =~ s/FAIL/[[00;31mFAIL[0m][01m/;
	$line =~ s/COREDUMP/[[00;33mCOREDUMP[0m][01m/;
	$line =~ s/ERROR/[[01;30mERROR[0m][01m/;
	$line =~ s/RUNNING/[[00;34mRUNNING[0m][01m/;
	$line = "[01m" . $line . "[0m";
    } else {
	$line =~ s/PASS/[[00;32mPASS[0m]/;
	$line =~ s/FAIL/[[00;31mFAIL[0m]/;
	$line =~ s/COREDUMP/[[00;33mCOREDUMP[0m]/;
	$line =~ s/ERROR/[[01;30mERROR[0m]/;
	$line =~ s/RUNNING/[[00;34mRUNNING[0m]/;
    }
    return $line; 
}



__END__


=head1 NAME

last-log -- Navigate test results easily 

=head1 SYNOPSIS

last-log reads /etc/clustertest.conf to see where log files are stored. It 
shows the date and name of 9 tests (by default the last 9 tests) and allows
the user to choose test results to analyze.

=head1 CONFIGURATION

Make sure that the 'Outdir' variable is properly set in /etc/clustertest.conf 
and that analyze-log is in your PATH variable. 

=head1 Copyright 

  Copyright 2008, Cluster Resources                                                                                                    
  By Michael Moore, mmoore@clusterresources.com  
  http://www.clusterresources.com/

