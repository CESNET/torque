#!/usr/bin/perl -w 

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use CRI::Test::Reader;
use POSIX qw(:termios_h);

# Browse the test results from a single run
#
# By Michael Moore mmoore@clusterresources.com
# Copyright 2007, Cluster Resources Inc.
#
# This should likely be run as root so that you can re-run tests and save changes to files


# PREFERENCES  

my $prepromp = ">> ";                      #  $preprompt $currentTestAndStatus $prompt
my $prompt = " # ";
my $editor = "vim";    # editor command to use with e and E commands. 
my $splitEditor = "vim -O";  # Editor command to view two files side by side
my $treeMode = 1;                          # start in tree view? 

# END PREFERENCES


my $testFile = $ARGV[0];

# Use Summary.log by default

if (not defined $testFile) 
{
    $testFile = 'Summary.log' if( -e 'Summary.log');
    die("Give a filename please\n") unless defined $testFile;
}

my $version = 0.6;

my $testResult = CRI::Test::Reader->new;
$testResult->loadLog($testFile);

print "\n\n\tWelcome to browse-log version $version.\n\tPress '?' for help\n";


my $keepGoing = 1;
my $key = "-";       
my $lastChoice = "-";

# Inspection mode loop
while($keepGoing){

    `clear`;

    # Get user input
    if($treeMode){
	bprintTree();
	$key = getChar();
    }
    else 
    {
	print $prepromp . colorLine($testResult->nodeSummary()) . $prompt;
	$key = <STDIN>;
    }    

    # I can't believe that perl doesn't have a trim function...
    $key =~ s/^\s*(\S*(?:\s+\S+)*)\s*$/$1/;
    act($key);
}

sub act
{
    my $key = $_[0];

    # I can't believe that perl doesn't have a native switch/case statement...
    if($key eq '')                {$key = $lastChoice;} #   Run previous command again

    if($key eq 'q')               { quitNow(); }          
    elsif($key eq '?')            { help(); }             
    elsif($key eq 'v')            { bviewNode(); }        
    elsif($key eq 'g')            { setCurrent(); }     
    #elsif($key eq 'r')            { runCurrent(); }       
    #elsif($key eq 'n')            { runCurrent(); }       
    elsif($key eq 'r')            { runCurrentnow(); }       
    elsif($key eq 'R')            { reloadCurrent(); }    
    elsif($key eq 'd')            { debugCurrent(); }     
    elsif($key eq 'c')            { childStatus(); }     
    elsif($key eq 'C')            { editCoreDumpLog(); }     
    elsif($key eq 'K')            { killProcess(); }     
    elsif($key eq 'e')            { editRawLog(); }     
    elsif($key eq 'E')            { editTest(); }      
    elsif($key eq 'o')            { splitTests(); }    
    elsif($key eq 'O')            { splitTestResult(); }
    elsif($key eq 's')            { bashShell(); }      
    elsif($key eq 't')            { $treeMode = !$treeMode; }
    elsif($key eq 'a')            { runApiTest(); }         
    elsif($key eq '.')            { toggleSiblings(); }    
    elsif($key eq '+')            { keepOpen(); }         
    elsif($key eq '-')            { keepClosed(); }      

    # Tree navigation
    elsif($key eq '1') { bcollapseTree();} 
    elsif($key eq '2' || $key eq 'j' ) { bdownTree();} 
    elsif($key eq '3') { bcollapseBranch();} 
    elsif($key eq '4' || $key eq 'h') { bleftTree();} 
    elsif($key eq '5') { btoggleSummary();} 
    elsif($key eq '6' || $key eq 'l') { brightTree();} 
    elsif($key eq '7') { bexpandTree();} 
    elsif($key eq '8' || $key eq 'k') { bupTree();} 
    elsif($key eq '9') { bexpandBranch();} 
    elsif($key eq '*') { showFails();} 

    elsif($key =~ /^v\s*([0-9]*)/) { bviewNode($1); }    
    elsif($key =~ /^g\s*([0-9]*)/) { setCurrent($1); }   
    elsif($key =~ /^!\ *(.*)/)        { runCommand($1); }

    $lastChoice = $key;
}

sub keepOpen
{
    $testResult->keepOpen();
}

sub keepClosed
{
    $testResult->keepClosed();
}

sub toggleSiblings
{
    $testResult->toggleSiblings();
}

sub showFails
{ 
    $testResult->showFails();
}

sub killProcess
{
    my $cur = $testResult->getCur();
    `kill $cur`;
    unless($?){
	print "Killed test $cur\n";   
    }else{
	print "Couldn't kill test $cur (it's probably already dead)\n";   
    }
}

sub splitTestResult
{
    my $nodeRef = $testResult->viewNode(); 
    my $testfile = $nodeRef->{'SCRIPT'};
    my $testlog = $nodeRef->{'LOGFILE'};
    system("$splitEditor $testlog $testfile"); 
}

sub splitTests
{
    my $nodeRef = $testResult->viewNode(); 
    my $api = my $perl = $nodeRef->{'SCRIPT'};

    $api =~ s/^\/usr\/local\/perltests\/t\/(.*)$/\/usr\/local\/apitest\/tests\/$1/;
    $api =~ s/\.t$/\.pl/;
    system("$splitEditor $perl $api"); 
}

sub runApiTest
{
    my $nodeRef = $testResult->viewNode(); 
    my $script = $nodeRef->{'SCRIPT'};

    $script =~ s/^\/usr\/local\/perltests\/t\/(.*)\.(?:t|bat)$/$1/;
    print "Running $script with apitest's runtest\nThis could take a little while...\n\n";
    system("runtest $script 2>&1"); 
}

sub reloadCurrent
{
    my $cur = $testResult->getCur();
    $testResult->loadLog($testFile);
    $testResult->setCurrent($cur);
}

my @lastCommand = "";
sub runCommand 
{
    if($_[0] ne "")
    {
	@lastCommand = @_; 
    }
    print "Running @lastCommand";
    print `@lastCommand 2>&1`;
}


# Tree manipulation
sub bcollapseTree { $testResult->collapseTree(); }
sub bcollapseBranch { $testResult->collapseBranch(); }
sub bexpandTree { $testResult->expandTree(); }
sub bexpandBranch { $testResult->expandBranch(); }
sub btoggleSummary { $testResult->toggleSummary(); } # Toggle current node summary info

# Tree view navigation
sub bleftTree { $testResult->leftTree(); } # left
sub brightTree { $testResult->rightTree(); } # right 
sub bdownTree { $testResult->downTree(); } # down  
sub bupTree { $testResult->upTree(); } # up 

sub quitNow { $keepGoing = 0; }

# Functions called

sub bprintTree { print "\n\n" . colorLine($testResult->printTree()) . "\n\n"; }

sub runCurrent 
{
    my $nodeRef = $testResult->viewNode(); 
    my $test = $nodeRef->{'SCRIPT'};
    `perltest $test`;
    print "Test queued for re-running by Moab Test Daemon";
}

sub runCurrentnow 
{
    my $nodeRef = $testResult->viewNode(); 
    my $test = $nodeRef->{'SCRIPT'};
    print "\nRunning $test\n";
    print `$test 2>&1`;
    print "\nPress any key to continue\n";
    $key = getChar(); 
}

sub debugCurrent 
{
    my $nodeRef = $testResult->viewNode(); 
    system("perl -d $nodeRef->{'SCRIPT'}");
}

sub colorArray 
{
    foreach (@_)
    {
	s/PASS/[[00;32mPASS[0m]/;
	s/FAIL/[[00;31mFAIL[0m]/;
	s/RUNNING/[[00;34mRUNNING[0m]/;
	s/COREDUMP/[[00;33mCOREDUMP[0m]/;
	s/ERROR/[[01;30mERROR[0m]/;
    }
    return @_; 
}

sub colorLine 
{
    my $result = $_[0];
    $result =~ s/PASS/[[00;32mPASS[0m]/g;
    $result =~ s/FAIL/[[00;31mFAIL[0m]/g;
    $result =~  s/RUNNING/[[00;34mRUNNING[0m]/g;
    $result =~ s/COREDUMP/[[00;33mCOREDUMP[0m]/g;
    $result =~ s/ERROR/[[01;30mERROR[0m]/g;
    return $result;
}

sub childStatus
{
    my $node = $testResult->viewNode();

    my $kids = $node->{'CHILDREN'};
    my @results = ();
    foreach my $kid (@$kids)
    {
	push(@results,$testResult->nodeSummary($kid));
    }
    print "\n";
    print join("\n",sort(colorArray(@results)));
    print "\n\n"
}

sub editRawLog 
{
    my $nodeRef = $testResult->viewNode(); 
    system("$editor '" . $nodeRef->{'LOGFILE'} . "'");
}

sub editCoreDumpLog 
{
    my $nodeRef = $testResult->viewNode(); 
    system("$editor '" . $nodeRef->{'COREDUMPLOG'} . "'");
}

sub editTest
{
    my $nodeRef = $testResult->viewNode(); 
    system("$editor '" . $nodeRef->{'SCRIPT'} . "'");
}

sub bashShell
{
    print "\n#\tExecuting bash shell at " . `pwd` . "#\tType 'exit' to return to tests\n\n";
    system('bash');
}

sub setCurrent 
{
    print "\nCurrent node is now ".$testResult->setCurrent($_[0])." \n\n";# if(defined($_[0]));
}

sub bviewNode
{
    my $node = '';
    $node = $_[0] if (defined $_[0]);
    my $nodeRef = $testResult->viewNode($node); 
    print "\n";
    print "\tDESC = " . $nodeRef->{'DESC'} . "\n";
    print "\tLOGFILE = " . $nodeRef->{'LOGFILE'} . "\n";
    print "\tPTID = " . $nodeRef->{'PTID'} . "\n";
    print "\tSCRIPT = " . $nodeRef->{'SCRIPT'} . "\n";
    print "\tTEST_RESULT = " . colorLine($nodeRef->{'TEST_RESULT'}) . "\n";
    if( defined $nodeRef->{COREDUMP} )
    {
	print "\tCORE_DUMP = " . $nodeRef->{'COREDUMP'} . "\n"; 
	print "\tCORE_DUMP_LOG = " . $nodeRef->{'COREDUMPLOG'} . "\n"; 
    }
    print "\tCHILDREN = " . join(', ',@{$nodeRef->{'CHILDREN'}}) . "\n"; 
    print "\n";
}

sub help {

    print STDOUT<<EOF;

				[36;02mbrowse-log help file[0m

    [34;04;02mTest navigation                             Tree tools                          [0m
    2,j    Navigate down the tree               1    Collapse entire tree
    6,l    Navigate right in the tree           3    Collapse current branch
    8,k    Navigate up the tree                 5    Toggle summary
    4,h    Navigate left in the tree            7    Expand entire tree
    g      Go to top level test                 9    Expand current branch
    g ##   Go to test number ##                 *    Show all failed tests    
						.    Always show sibling tests  

    [34;04;02mDebugging and Analysis Tools                                                    [0m
    v      View current node info               r      Run the current test
    v ##   View node number ## info             a      Run the current test with apitest   
    c      Print a list of children tests       C      View CoreDump Log
    d      Run the current test in the debugger t      Toggle tree view / compact mode
    e      Edit the current test log file  	s      Start a bash shell
    E      Edit the current test 		!cmd   Run command cmd in the shell
    O      Split edit the test and log file     o      Split edit the api and perl tests


    [34;04;02mMiscellaneous                                                                    [0m
    R      Reload the test log file 
    q      Quit
    ?      This help 

		    [36;02mCheck this program's perldoc for more help[0m

			[36;02mPress any key to exit this help[0m
EOF
    $key = getChar(); 
}

sub getChar
{
    # Taken from perlfaq8    free under same license as perl itself
    # Modified somewhat to not use another module

    # this should work on any POSIX system.

    my $fd_stdin = fileno(STDIN);
    my $term     = POSIX::Termios->new();
    $term->getattr($fd_stdin);
    my $oterm     = $term->getlflag();
    my $echo     = ECHO | ECHOK | ICANON;
    my $noecho   = $oterm & ~$echo;
    $term->setlflag($noecho);  # ok, so i don't want echo either
    $term->setcc(VTIME, 1);
    $term->setattr($fd_stdin, TCSANOW);
    my $key = '';

    sysread(STDIN,$key,1);
    $term->setlflag($oterm);
    $term->setcc(VTIME, 0);
    $term->setattr($fd_stdin, TCSANOW);
    return $key;
}

=head1 NAME

browse-log -- A tool to make browsing and debuggin Moab::Test results easy

=head1 SYNOPSIS

uses the CRI::Test::Reader module to access the Moab test results and provide a 
good debugging environment for the Moab (and related products) tester

=head1 Running browse-log 

Put browse-log in your path, then run "browse-log <File>". <File> is typically named 
Summary.log, and Moab::Test creates one in the output directory for each batch of 
tests it runs

browse-log will parse Summary.log and access other files as needed. If no <File> is
given, browse-log will look for one named 'Summary.log' in the current folder. If 
no file is found, browse-log will exit. 

Press ? for help, and q for quit.

=head1 Keys and usage 

There are several preferences available for your customization. Edit browse-log for 
prompt, editor and start mode configuration. 


Keys are broken down into two main functional areas. 

1) Results navigating and viewing
2) Test debugging and analysis

=head2 Results navigation


  8 -- Up the list in the current level of tests
  2 -- Down the list in the current level of tests
  6 -- Go right one level in the test tree 
  8 -- Go left one level in the test tree 
  g ### -- Go directly to node number ###. Goes directly to the root node if no number is given 



  7 -- Flag all nodes in the tree as visible 
  1 -- Flag all nodes in the tree as hidden 
  9 -- Flag all current node and all child nodes as visible
  3 -- Flag all current node and all child nodes as hidden 
  * -- Flag all non-PASS nodes as visible (mnemonic: the test went bang)
  . -- Always show siblings of current test (mnemonic: Show tests at current hirearchy level. In Unix (.) is for the current filesystem hirearchy)

  5 -- Toggle extended test information's visibility (only shows for current node)
  v ### -- Print the test number ###'s extended information once
  Show's the root node's info if no number is given. (mnemonic: view info)


=head2 Debugging and Analysis

  r -- Run the currently selected test
  d -- Run the currently selected test in the Perl debugger
  a -- Run the currently selected test with apitest's runtest command

  s -- Start a bash shell
  ! <command> -- Run <command>. If no command is given, the previous command is re-run.

  e -- Open the log for the current test in $editor 
  E -- Open the current test in $editor 
  O -- Split edit the current test and the current test's log file (mnemonic: The vim flag -o edits two files in split mode)
  o -- Split edit the current test and the apitest version of the current test

  c -- Show the results of all the children of the current test. More usefull when not in tree mode. 
  t -- Toggle tree view and single test view

=head2 Miscellaneous

  q -- Quit
  ? -- Help
  R -- Reload the Summary.log file. Usefull if you are browsing the log of a currently running test.

=head2 Tips

If you are running many tests, it may be helpful to add something like this to your
.bashrc file

  alias lt='pushd /tmp/testoutput/`ls /tmp/testoutput/ | tail -1`'
  alias log="lt && browse-log && popd"

If /tmp/testoutput is the directory where individual test results folders are created,
these lines will make it so you can type 'log' at the bash prompt and start browse-log
on the last test you ran.

The navigation numbers make more sense when using the number pad for navigation. Vim navigation keys (h,j,k,l) can also be used for navigation. 

No matter which nodes are flagged as visible, you will always be able to see your current node and it's parent nodes.

Set the $editor and $splitEditor variables if you don't like vim.

Pressing <ENTER> will re-run the previous action

=cut
